import { Handler, HandlerType, HandlerFunction, NextFunction } from "./interfaces/handler";
import { z } from "zod";
import Request from "./Request";
import Response from "./Response";
/**
 * Create new subrouters using
 */
export default class Router {
    stack: Array<HandlerController | RouterController>;
    protected handlers: Array<Handler>;
    protected docs: Array<TDoc>;
    private addDoc;
    private addEndPointAndDocument;
    /**
     * Manually add handler by providing {path, method, type, handler}
     * @param Handler Object with path, type, method and handler
     */
    addHandler({ path, method, type, handler, }: Handler): void;
    /**
     * Add sub routers super elegently
     * @param path Path at which you want your router to function
     * @param router The sub router
     * @returns
     */
    addRouter(path: string, router: Router): this;
    /**
     * Add middlewares to the data flow chain
     * @param middleware An handler function
     * @returns
     */
    use(middleware: HandlerFunction): this;
    /**
     * Configure an RPC endpoint
     * You can add input and output validation using zod
     * The method would always be POST
     *
     * @param path
     * @param param1
     * @returns
     */
    rpc(path: string, { inp, out, handler }: TRPC): this;
    /**
     * A utility method to attach a handler to a path irrespective of the request method
     * @param path The path at which you want to attach the handler
     * @param handlers An array of handlers
     * @returns
     */
    all(path: string, ...handlers: Array<HandlerFunction>): this;
    /**
     * A utility method to attach a `GET` Request handler to a path
     * @param path The path at which you want to attach the handler
     * @param handlers An array of handlers
     * @returns
     */
    get(path: string, ...handlers: Array<HandlerFunction>): this;
    /**
     * A utility method to attach a `POST` Request handler to a path
     * @param path The path at which you want to attach the handler
     * @param handlers An array of handlers
     * @returns
     */
    post(path: string, ...handlers: Array<HandlerFunction>): this;
    /**
     * A utility method to attach a `PUT` Request handler to a path
     * @param path The path at which you want to attach the handler
     * @param handlers An array of handlers
     * @returns
     */
    put(path: string, ...handlers: Array<HandlerFunction>): this;
    /**
     * A utility method to attach a `PATCH` Request handler to a path
     * @param path The path at which you want to attach the handler
     * @param handlers An array of handlers
     * @returns
     */
    patch(path: string, ...handlers: Array<HandlerFunction>): this;
    /**
     * A utility method to attach a `DELETE` Request handler to a path
     * @param path The path at which you want to attach the handler
     * @param handlers An array of handlers
     * @returns
     */
    delete(path: string, ...handlers: Array<HandlerFunction>): this;
    protected compileHandlers(): this;
}
interface RouterController {
    path: string;
    router: Router;
    isRouter: true;
}
interface HandlerController extends Handler {
    isRouter: false;
}
export interface TDoc extends Handler {
    group: string;
    type: HandlerType.endpoint;
}
export interface TRPC {
    inp: z.ZodTypeAny;
    out: z.ZodTypeAny;
    handler: (req: Request, res: Response, next: NextFunction) => void;
}
export {};
