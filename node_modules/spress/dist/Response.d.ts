/// <reference types="node" />
/// <reference types="node" />
import { OutgoingHttpHeader, OutgoingHttpHeaders, ServerResponse } from "http";
import send from "send";
import { Handler } from "./interfaces/handler";
/**
 * A wrapper around the `http.ServerResponse`
 */
export default class Response {
    res: ServerResponse;
    isBrowserRequest: boolean;
    route?: Handler;
    constructor(res: ServerResponse);
    /**
     * A simple utility to set any Header
     * @param field The header that you want to set
     * @param value The value
     * @returns
     */
    set(field: string, value: string): this;
    /**
     * A simple utility to set any Header
     * @param field The header that you want to set
     * @param value The value
     * @returns
     */
    setHeader(field: string, value: string): this;
    /**
     * Send anything as response
     * @param message The content you want to send
     * @param cb Error handler (if anything goes wrong)
     * @returns
     */
    write(message: any, cb?: (error: Error | null | undefined) => void): this;
    /**
     * End the response and return once called nothing can be send to the client
     * @param cb
     * @returns
     */
    end(cb?: () => void): this;
    /**
     * Send the provided message and end the response.
     * Also auto detects if the client is browser and nicely formats the output
     * @param message Content to be sent
     * @param cb
     * @returns
     */
    send(message: any, cb?: (error: Error | null | undefined) => void): this;
    /**
     * Set statuscode of the response
     * @param statusCode The status code
     * @returns
     */
    status(statusCode: number): this;
    /**
     * Set status and optionally write some response geaders
     * @param statusCode
     * @param statusMessage
     * @param headers
     * @returns
     */
    writeHead(statusCode: number, statusMessage?: string, headers?: OutgoingHttpHeaders | OutgoingHttpHeader[]): this;
    /**
     * Pipe any stream data to the client
     * @param dest A stream to you want to pipe
     * @param opt
     * @returns
     */
    pipe(dest: NodeJS.WritableStream, opt?: {
        end?: boolean;
    }): NodeJS.WritableStream;
    /**
     * Return data as JSON
     * @param data
     * @returns
     */
    json(data: any): this;
    /**
     * Utility to send json and set status success
     * @param data
     * @returns
     */
    success(data: any): this;
    /**
     * Send any files to the client
     * @param path Path of the file to be sent
     * @param options Any options
     * @returns
     */
    sendFile(path: string, options?: send.SendOptions): this;
    /**
     * Send and download any file to the client
     * @param filePath Path to the file to be downloaded
     * @param options
     * @returns
     */
    download(filePath: string, options?: send.SendOptions): this;
}
